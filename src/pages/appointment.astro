---
import Layout from "../layouts/Layout.astro"
import { registerAppointment, appointmentSchema } from "../services/appointment"
import { getHouses } from "../services/house"

let message = null
let error = null
let loading = false
const getCurrentTime = (): string => {
  const date = new Date()
  const offset = date.getTimezoneOffset()
  return new Date(date.getTime() - (offset * 60000)).toISOString().slice(0, 16)
}
const currentTime = getCurrentTime();

let houseIdStr = new URL(Astro.request.url).searchParams.get('idHouse') ?? null
let houseId = houseIdStr ? parseInt(houseIdStr) : null

const houses = await getHouses({ })
let selectedHouse = houses.find((house) => house.houseId === houseId)

if(Astro.request.method === 'POST') {  
  try {
    const userIdStr = Astro.cookies.get('userId')?.value;
    const userId = userIdStr ? parseInt(userIdStr) : null
    const authToken = Astro.cookies.get('token')?.value

    const formData = await Astro.request.formData()
    const dateStr = formData.get('date') as string
    const date = new Date(dateStr)
    const utcDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
    houseIdStr = formData.get('houseId') as string
    houseId = houseIdStr ? parseInt(houseIdStr) : null

    const validatedData = appointmentSchema.safeParse({
      userId: userId ?? 0,
      houseId : houseId ?? 0,
      date: date ?? new Date(0)
    })

    if (!validatedData.success) {
      error = validatedData.error.errors[0].message
      loading = false
    } 
    else {
      const response = await registerAppointment({ userId: userId ?? 0, agentId: (Math.floor(Math.random() * 4) + 1), date: utcDate, houseId: houseId ?? 0 }, authToken)
      if(response) {
        message = "Cita registrada exitosamente"
        return Astro.redirect('/viewAppointments')
      }
    } 
  } catch (err) {
    error = err instanceof Error ? err.message : 'Ocurrió un error al registrar la cita'
  } finally {
    loading = false
  }
}
---

<Layout title="Agenda una Cita">
  <div class="flex w-full max-w-screen-sm h-screen items-center justify-center">
    <section class='flex flex-col h-auto w-full max-w-screen-sm items-center justify-center text-lg bg-neutral-900 rounded-md py-5 relative'>
      <div class='absolute -z-10 -inset-[2px] w-auto h-auto bg-gradient-to-br from-logan-300/80 via-transparent to-logan-300/80 rounded-md shadow-md' />
      <h1 class='text-3xl font-medium '>Agenda una Cita</h1>
      <hr class='h-px w-full mt-6 mb-2 bg-gradient-to-r from-transparent via-logan-300 to-transparent border-0' />
      {
        Astro.cookies.get('token') ?
           (
            <form method="POST" class='flex flex-col items-center w-full px-10 mt-10 mb-2'>
              <div class='relative w-full py-1 px-3 ring-2 ring-logan-300 rounded-full focus-within:shadow-[0px_0px_4px_4px_rgba(188,176,217,0.76)]'>
                <label for='houseId' class='absolute -top-4 left-5 z-10 bg-neutral-900 px-3 text-base'>Casa</label>
                <select id='houseId' name='houseId' class='bg-inherit w-full overflow-hidden'>
                  <option class='bg-neutral-800 text-white' value={selectedHouse?.houseId}>{selectedHouse?.description}</option>
                  {houses.length > 0 && houses.map((house) => (
                    <option class='bg-neutral-800' value={house.houseId}>{house.description} | ${house.price}</option>
                  ))}
                </select>
              </div>
              <div class='relative w-full py-1 px-3 mt-10 ring-2 ring-logan-300 rounded-full focus-within:shadow-[0px_0px_4px_4px_rgba(188,176,217,0.76)]'>
                <label for='date' class='absolute -top-4 left-5 z-10 bg-neutral-900 px-3 text-base'>Ingrese la Fecha</label>
                <input type='datetime-local' id='date' name='date' value={currentTime} min={currentTime} required class='relative z-0 rounded-full focus:outline-none border-none bg-inherit w-full px-1 text-white' />
              </div>
              <small class='self-start p-1 pl-4'>Horario de citas (10:00am - 5pm)</small>

              <div class='flex items-center justify-center mt-4 h-6'>
                {loading && <span class='w-3 h-3 rounded-full block mx-4 my-auto relative text-logan-300 -left-24 box-border animate-shadow-rolling' />}
                <p class='text-red-500 '>{error}</p>
                <p class='text-green-500 '>{message}</p>
              </div>
              <div class='flex relative z-0 mt-10 mb-1 justify-center bg-gradient-to-r from-logan-400/50 to-transparent p-1 rounded-full backdrop-blur-lg'>
                <div class='absolute top-1/2 left-1/2 -z-10 w-[300%] h-[2px] bg-gradient-to-r from-transparent via-logan-300 to-transparent rounded-full transform -translate-x-1/2' />
                <div class='flex w-full justify-center bg-gradient-to-r from-logan-400 to-transparent p-[2px] rounded-full backdrop-blur-lg'>
                  <button
                    type='submit'
                    class='w-full text-white text-lg px-6 bg-neutral-900 rounded-full hover:bg-gradient-to-r hover:from-logan-400/50 hover:to-transparent duration-200'
                  >
                    Agendar Cita
                  </button>
                </div>
              </div> 
            </form>
            )
          : (
            <div class='flex flex-col items-center justify-center w-full h-full'>
              <p class='text-lg mt-2'>Inicia sesión para agendar una cita</p>
              <a href='/login' class='mt-2 text-lg text-logan-300'>Iniciar Sesión</a>
            </div>
            )
      }
    </section>
  </div>
</Layout>